<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="org.biz.shopverse.mapper.member.MemberMapper">
    <select id="findByLoginId" resultType="org.biz.shopverse.dto.member.response.MemberResponse">
        SELECT 
            m.id,
            m.login_id,
            m.name,
            m.nickname,
            m.phone,
            m.email,
            m.gender,
            m.birth_date,
            m.is_social,
            m.social_provider,
            m.marketing_yn,
            m.sms_yn,
            m.email_yn,
            m.point,
            m.status,
            m.last_login_at,
            m.created_at,
            m.updated_at
        FROM members m
        WHERE m.login_id = #{loginId}
        AND m.status = 'ACTIVE'
    </select>

    <select id="findByMemberWithRoles" resultType="org.biz.shopverse.dto.member.MemberWithRoles">
        SELECT
            m.name,
            m.login_id AS loginId,
            m.password,
            TO_JSON(ARRAY_AGG(r.role_code)) AS roles
        FROM members m
            INNER JOIN member_roles mr ON mr.login_id = m.login_id
            INNER JOIN roles r ON r.role_id = mr.role_id
        WHERE m.login_id = #{loginId}
        GROUP BY m.name, m.login_id, m.password
    </select>
    
    <select id="existsByLoginId" resultType="boolean">
        SELECT EXISTS(
            SELECT 1 
            FROM members 
            WHERE login_id = #{loginId}
        )
    </select>

    <select id="existsByEmail" resultType="boolean">
        SELECT EXISTS(
            SELECT 1 
            FROM members 
            WHERE email = #{email}
        )
    </select>

    <insert id="createMember" parameterType="org.biz.shopverse.dto.member.request.MemberCreateRequest">
        INSERT INTO members (
            login_id,
            password,
            name,
            nickname,
            phone,
            email,
            gender,
            birth_date,
            is_social,
            social_provider,
            marketing_yn,
            sms_yn,
            email_yn,
            point,
            status,
            created_at,
            updated_at
        ) VALUES (
            #{loginId},
            #{password},
            #{name},
            #{nickname},
            #{phone},
            #{email},
            #{gender},
            #{birthDate},
            #{isSocial},
            #{socialProvider},
            #{marketingYn},
            #{smsYn},
            #{emailYn},
            0,
            'ACTIVE',
            NOW(),
            NOW()
        );

        INSERT INTO member_roles (
            login_id, 
            role_id
        ) VALUES (
            #{loginId},
            (SELECT role_id FROM roles WHERE role_code = 'ROLE_USER')
        );
    </insert>
    
    <update id="updateMember" parameterType="map">
        UPDATE members 
        SET 
            name = #{memberUpdateRequest.name},
            nickname = #{memberUpdateRequest.nickname},
            phone = #{memberUpdateRequest.phone},
            email = #{memberUpdateRequest.email},
            gender = #{memberUpdateRequest.gender},
            birth_date = #{memberUpdateRequest.birthDate},
            marketing_yn = #{memberUpdateRequest.marketingYn},
            sms_yn = #{memberUpdateRequest.smsYn},
            email_yn = #{memberUpdateRequest.emailYn},
            updated_at = NOW()
        WHERE login_id = #{loginId}
        AND status = 'ACTIVE'
    </update>
</mapper> 
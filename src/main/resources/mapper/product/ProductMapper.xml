<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="org.biz.shopverse.mapper.product.ProductMapper">
    <select id="findAllCategories" resultType="org.biz.shopverse.dto.product.response.CategoryResponse">
        SELECT 
            id,
            code,
            name,
            slug,
            description,
            parent_id,
            icon_url,
            banner_image,
            sort_order,
            is_active,
            seo_title,
            seo_description,
            created_at,
            updated_at
        FROM categories
        ORDER BY sort_order ASC, name ASC
    </select>

    <select id="findActiveCategories" resultType="org.biz.shopverse.dto.product.response.CategoryResponse">
        SELECT 
            id,
            code,
            name,
            slug,
            description,
            parent_id,
            icon_url,
            banner_image,
            sort_order,
            is_active,
            seo_title,
            seo_description,
            created_at,
            updated_at
        FROM categories
        WHERE is_active = true
        ORDER BY sort_order ASC, name ASC
    </select>

    <!-- Paged product list with optional category filter and search -->
    <select id="selectProductsPaged" resultType="org.biz.shopverse.dto.product.response.ProductResponse">
        SELECT
            p.id,
            pv.id AS variant_id,
            COALESCE(pv.name, p.name) as name,
            p.slug,
            p.subtitle,
            p.description,
            p.short_description,
            COALESCE(pv.price, p.price) AS price,
            COALESCE(pv.compare_price, p.compare_price) AS compare_price,
            p.cost_price,
            p.category_id,
            CASE
            WHEN p.compare_price IS NULL OR p.compare_price = 0 THEN 0
            ELSE ROUND(((COALESCE(pv.compare_price, p.compare_price) - COALESCE(pv.price, p.price)) / COALESCE(pv.compare_price, p.compare_price)) * 100, 1)
            END AS discount_percent,
            p.brand_id,
            COALESCE(pv.sku, p.sku) AS sku,
            COALESCE(pv.barcode, p.barcode) AS barcode,
            COALESCE(pv.weight, p.weight) AS weight,
            p.dimensions,
            p.status,
            p.visibility,
            p.is_digital,
            p.is_subscription,
            p.is_customizable,
            p.is_preorder,
            p.preorder_date,
            p.track_inventory,
            p.allow_backorder,
            p.min_order_quantity,
            p.max_order_quantity,
            p.meta_title,
            p.meta_description,
            p.search_keywords,
            p.featured_until,
            p.average_rating,
            p.review_count,
            p.view_count,
            p.sales_count,
            p.wishlist_count,
            p.created_at,
            p.updated_at,
            p.published_at,
            p.deleted_at,
            pv."options"
        FROM products p
        LEFT JOIN product_variants pv
            ON pv.product_id = p.id
        WHERE 1 = 1
        AND p.status = 'active'
        AND p.visibility = 'visible'
        AND p.deleted_at IS NULL
        <if test="categoryId != null">
            AND p.category_id IN (
                WITH RECURSIVE category_tree AS (
                    SELECT id, parent_id, name FROM categories WHERE id = #{categoryId}
                    UNION ALL
                    SELECT c.id, c.parent_id, c.name FROM categories c INNER JOIN category_tree ct ON c.parent_id = ct.id
                )
                SELECT id FROM category_tree
            )
        </if>
        <if test="search != null and search != ''">
            AND (LOWER(p.name) LIKE CONCAT('%', LOWER(#{search}), '%') OR LOWER(p.search_keywords) LIKE CONCAT('%', LOWER(#{search}), '%'))
        </if>
        <choose>
            <when test="sort == 'price-low'">ORDER BY p.price ASC</when>
            <when test="sort == 'price-high'">ORDER BY p.price DESC</when>
            <when test="sort == 'rating'">ORDER BY p.average_rating DESC NULLS LAST</when>
            <when test="sort == 'popular'">ORDER BY p.sales_count DESC NULLS LAST</when>
            <otherwise>ORDER BY p.created_at DESC</otherwise>
        </choose>
        LIMIT #{size} OFFSET #{offset}
    </select>

    <select id="countProducts" resultType="long">
        SELECT COUNT(1)
        FROM products p
        <where>
            p.status = 'active'
            AND p.visibility = 'visible'
            AND p.deleted_at IS NULL
            <if test="categoryId != null">
                AND p.category_id IN (
                    WITH RECURSIVE category_tree AS (
                        SELECT id, parent_id, name FROM categories WHERE id = #{categoryId}
                        UNION ALL
                        SELECT c.id, c.parent_id, c.name FROM categories c INNER JOIN category_tree ct ON c.parent_id = ct.id
                    )
                    SELECT id FROM category_tree
                )
            </if>
            <if test="search != null and search != ''">
                AND (LOWER(p.name) LIKE CONCAT('%', LOWER(#{search}), '%') OR LOWER(p.search_keywords) LIKE CONCAT('%', LOWER(#{search}), '%'))
            </if>
        </where>
    </select>

</mapper>
